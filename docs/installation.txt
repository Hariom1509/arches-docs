############
Installation
############

Once you have all of the dependencies installed, open a command prompt and use the following steps to install the latest stable release of Arches. To install the latest non-stable Arches code (generally only necessary for developers), you can follow `these installation steps <https://github.com/archesproject/arches/wiki/Developer-Installation>`_.

#. Create and enter a new directory called Projects::

    mkdir Projects && cd Projects

#. Create a virtual environment called ENV::

    virtualenv ENV

#. Activate the new virtual environment

    **Linux and macOS**::

        source ENV/bin/activate

    **Windows**::

        ENV\Scripts\activate

    .. note:: At this point (once the virtual environment is activated), Windows users need to manually install Shapely. `Follow these instructions <https://github.com/archesproject/arches/wiki/Installing-Dependencies-on-Windows#shapely>`_.

#. Install Arches into your virtual environment

    You can install Arches with pip::

        pip install arches --no-binary :all:

    .. warning:: Running a pip installation without the ``--no-binary :all:`` argument will install ``arches`` in your virtual environment, but will not install all of the separate python packages that you need. This will cause you to not be able to proceed with the following steps.

#. Create a new Arches project

    A project is a standalone Arches app that sits outside of your virtual environment and facilitates all of the customizations that you will need to make one installation of Arches different from the next.

    **Linux and macOS**::
    
        arches-project create my_project

    **Windows**::

        python C:\Projects\ENV\Scripts\arches-project create my_project

    .. note:: On Windows, the above command will end in an error on the last step of the command. The workaround for this is to enter ``my_project\my_project\`` (the directory that contains ``bower.json``) and run this command: ``bower install``.

    .. warning:: On Windows, you must specify the path to your GDAL library before continuing. Open ``settings.py`` in your new project and add this line: ``GDAL_LIBRARY_PATH = 'C:/OSGeo4W64/bin/gdal201.dll'`` Be sure to adjust the path as necessary for your installation, and note the *forward* slashes.

    At this point you should `install ElasticSearch <https://github.com/archesproject/arches/wiki/Installing-and-Running-Elasticsearch>`_ (unless you have done so already) before continuing.

#. Setup your Arches database

    First, make sure ElasticSearch is installed and running

    Then create your Arches database with::

        python manage.py packages -o setup_db

#. Run the development server

    To view Arches, run::

        python manage.py runserver

    You can now view Arches by navigating to ``localhost:8000`` in a browser.

More about Arches Projects
===========================

Arches Projects facilitate all of the customizations that you will need to make one installation of Arches different from the next. You can update html to modify web page branding, and add functions, datatypes, and widgets to introduce new functionality. A project sits outside of your virtual environment, and can thus be transferred to any other system where Arches is installed.

The general structure of a new Arches project is:::

	my_project/
	└─ manage.py
	└─ my_project/
	      └─ settings.py
	      └─ datatypes/
	      └─ functions/
	      └─ media/
	      └─ templates/
	      └─ widgets/

*Note that not all files are shown*

settings.py
^^^^^^^^^^^^

Many project-specific settings are defined here. You will likely want to add a ``settings_local.py`` file that can separately store variables that you may want to keep out of the public eye (db passwords, API keys, etc.).

templates
^^^^^^^^^^^

This directory holds HTML templates that you can modify to customize the branding and general appearance of your project.

datatypes, fuctions, and widgets
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

These directories will store the custom datatypes, functions, and widgets that you can create for the project. Developers interested in pursuing these customizations should start with `this customization documentation <https://github.com/archesproject/arches/wiki/Creating-New-Functions%2C-DataTypes%2C-and-Widgets>`_.
