############
Arches Data
############

Physical Data model
===================

.. note:: This section is most useful for those who wish to issue sql queries directly against the Arches backend PostgreSQL database.


The Arches physical data model consists of tables and referential integrity constraints implmented within a PostgreSQL database.  It is driven by a requirement that Arches be able to support data management for most any cultural heritage application in the world without the need to modify the underlying table structure.  


To accomplish this, Arches stores both metadata - defining the set of resource types and attributes available to store - and business data - inventorying and describing the cultural heritage resources themselves.


The physical data model is best understood when broken into three distinct parts: Ontology Data,  Reference Data, and Resources Data.  The ``entity_types`` table plays a role in all three of these parts of the data model. 


[Arches ERD.jpg]


**Ontology Data**


The ontology portion of the data model stores the metadata sourced from the resource graphs.  These tables therefore contain information about what is the valid set of semantic "types" of data (by default, Arches uses CIDOC CRM [http://www.cidoc-crm.org/] to define these things), and what are the valid types of relationships between them.


**Reference Data**


This is where Arches stores the hierarchical controlled vocabularies that power drop down lists in Arches applications.  Items in drop-down lists are called "concepts".  Metadata about concepts, such as their labels and scope notes are stored in the related ``values`` table, and relationships between concepts are managed in the ``relations`` table.


**Resources Data**


The Resources Data section is where Arches stores the actual cultural heritage resource information - the business data. The key concepts to understand in this portion of the database are entities, relations, and "business tables".  

Entities within an Arches database represent one of three things:

#. the existence of a cultural heritage resource
#. an attribute of a cultural heritage resource, or
#. a record required to maintain ontological consistency between attributes

Relations represent relationships between entities within an Arches database.  Records in this table indicate a relationship between two distinct entities.

Business tables contain strings, numbers, dates, or geometries that capture actual attributes of resources.  These work by linking entities (by ``entityid``) to respective values.

One special business table is the domains table.  It is unique in that it only stores ``valueid`` (as a foreign key from the values table within the Reference Data) in order to relate entities that are constrained by a controlled vocabulary to its appropriate Reference Data records.

**Entity Types**

The ``entity_types`` table really belongs in all three categories because:

* they classify entities into an "attribute" that an implementor defines in the course of creating resource graphs. 
* they link the attribute to one of a series of ontological categories that, by default, is based on CRM
* they specify which attributes must be powered by drop-down lists from the Reference data section.

In the simplest potential case, a resource that happens to be a person with a name will, at a minimum, contain two entities and one relation.  That is, an entity that represents the existence of the resource, another entity that contains the person's name, and a relation that links the two together.



Resource Graphs
===============

A "Resource Graph" is the logical framework that is used by Arches to define the set of resource types and attributes to be managed.  

Arches applications must provide a resource graph for each resource type being inventoried.

One example of a fully featured resource graph from the Arches HIP application is ``HERITAGE_ RESOURCE.E18``.


[image]


While this visualization is useful for creating, editing, and analyzing the resource and its available attributes, the graph's data is populated into Arches from two csv formatted files named ``{resource type name}_nodes.csv`` and ``{resourcetype name}_edges.csv``.  

.. note:: As of the writing of this document, the Arches developers' primary tool to develop and visualize the resource graphs is Gephi (http://www.gephi.org/).  However, it is possible that a future version of Arches may include tools that support resource graph development and visualization.

Regardless of how the nodes and edges csv files are created, they must include the columns defined below.

**Nodes:**

* ``Id``: a unique and arbitrary ID for each record within the file
* ``Label``: the name of the entity type that is stored in a given node.  This name must be concatenated with a dot (".") and the CRM class associated to that entity type
* ``mergenode``: defines the upstream node that occurs one time (and only one time) within a given resource instance.  In most cases, that node is the one that represents the resource itself.
* ``businesstable``: identifies the respective business table (strings, numbers, dates, geometries, domains) that will store values associated to instances of the node. This value should be left null for nodes that never store a business data. 

**Edges:**

* ``Source``: the ID of the source node
* ``Target``: the ID of the target node
* ``Label``: the semantic CRM "property" that allows them to connect to each other.

.. note:: Arches comes loaded with the semantic properties defined in the CIDOC CRM (http://www.cidoc-crm.org/).  Look to the CRM documentation to learn about the list of available properties.


Ontologies
----------

The fundamental role of resource graphs is to define a suite of resource types, their attributes, and relationships between them.  However, the graph also supports associating nodes and edges within the resource graph to semantic classes and properties defined in CIDOC CRM.  

.. note:: One should refer to CIDOC CRM (http://www.cidoc-crm.org/) to make an informed decision about what class or property to assign to nodes and edges respectively.

For those who do not care about CRM, ontologies or semantic interoperability, the simplest way to make a valid graph is to assign all nodes as "E1" and all edges as "P1".  

Reference Data Graph
====================

Explain the fixed parts of the graph, and where individual thesauri slot in.

Loading Reference Data
======================

from .csv
------------


from .skos
---------
Do we even have a way to point to folder full of skos files and say load them?

Loading Business Data
======================
Resources and their attributes can be loaded to Arches resource graphs using one of two formats: shapefiles or a specially formatted text file with a ".arches" extension.  

Shapefiles have the significant limitation that they cannot define explicit relationships between resources and they can only hold one attribute value per entity type. 

Dot Arches files, on the other hand, take a key-value pair approach populating resource graphs with resources with attributes.  Therefore, they are able to add as many of a given attribute as exists in the data.  The downside of the dot arches format is that it can take a significant data processing or reformatting effort to get a significant amount of source data ready for loading to Arches from this format.



from .arches
------------
The .arches format is intended to support upload of Arches data containing rich content and complex relationships while also being acheivable to format properly using common software like MS Excel or OpenOffice.

The dot arches file is a pipe ("|") delimited text file containing the following column headers:

RESOURCEID
RESOURCETYPE
ATTRIBUTENAME
ATTRIBUTEVALUE
GROUPID

The file is really just a list of business entities to be loaded to Arches.  By "business entities", we mean it only requires those entities that actually store a business value.  In this way, the .arches format is obfuscated from the details of the resource graph that it is being loaded to.  The only real requirement is that the entity types referenced in the ATTRIBUTENAME field exist within the resource graph that the data is being loaded into.

The format fundamentally takes a key-value pair approach to storage where the ATTRIBUTENAME defines the key (actually the entity type as defined in the resource graph) and the ATTRIBUTEVALUE defines the business value of the entity.

RESOURCEID is a user-generated unique ID for each individual resource.  Since any given resource will likely have many attributes, it is expected that a given RESOURCEID value will repeat on many lines.  As a point of reference, Arches will create a seperate unique ID for any resource that is laoded and will save the RESOURCEID provided within the .arches file as an external reference of type "Legacy ID".

RESOURCETYPE specifies which resource type graph a given attribute is being loaded to.  In the Arches HIP Application, the available resource types include: ACTIVITY.E7, ACTOR.E39, HERITAGE_RESOURCE.E18, HERITAGE_RESOURCE_GROUP.E27, HISTORICAL_EVENT.E5, and INFORMATION_RESOURCE.E73.

ATTRIBUTENAME specifies the node from the appropriate resource graph that the supplied value (in the ATTRIBUTEVALUE column) will load to.  Note that ATTRIBUTENAME is synonymous with entitytypeid.  Essentially, you are specifying the enitytypeid of the (business) entity that you are loading to the system.

ATTRIBUTEVALUE stores the the actual business value of the enitit.  ATTRIBUTEVALUE values must conform to the datatype specified by the businesstable associated to the ATTRIBUTENAME. See the Postgres documentation for appropriate formatting for strings, numbers, and dates.  See the notes below for formatting details on Geometries and Domains.

.. note:: Geometry: Any value that is to be loaded as a geometry must be formatted using Well Known Text (or "WKT" for short) with coordinates set to ESPG 4326 or latitude/longitude WGS84 (http://spatialreference.org/ref/epsg/4326/).  WKT is a standard format for storing vector geometry as human-readable text.  Details of the standard can be found here: https://portal.opengeospatial.org/files/?artifact_id=54797, and wikipedia has a much more readable aggregation of the relevant information here: http://en.wikipedia.org/wiki/Well-known_text.

.. note:: Domains: Another special case here is values assocaited to ATTRIBUTENAME(s) that link to the "domains" businesstable.  In those cases, the value store in ATTRIBUTEVALUE must be the conceptid fed in from csv-formatted "authority files."   More on authority files is available in the "Loading Reference Data" section.

GROUPID is inteded to support cases where business values stored in seperate nodes within the resource graph must be assocaited to each other. To illustrate the need, the classic example is an ACTOR resource graph that contains both FIRST_NAME.E1 and LAST_NAME.E1 as seperate nodes.  In that case, a an ACTOR that has two seperate names would need to know which first name and which last name go together.  (An example might be Mark Twain and Samuel Clemens.)  To group these appropriately, the two rows containing "Mark" and "Twain" should share a common GROUPID value and the two rows containing "Samuel" and Clemens" should have the same.  



-syntax
-arches-level validation
 validate_row_syntax - validates format of archesfile row
validate_entitytype - checks that entitytype listed exists in the resource graph for that resource type
valdiate_attribute_value - checks that the attributevalue is valid within the context of the businesstablename (e.g. a date is actually formatted correclty, a number is really a number and not a string)
validate_contiguousness - checks that resource attributes are on contiguous lines in the .arches file
validate_relations_file - checks that all resourceids listed in the .relations file exist in the .arches file


from .shp
---------


An Example Data Load
--------------------

Below is a very simple and internally consistent resource graph, set of authority documents, and .arches file. The intent is to illustrate how a logical model is defined and how data can be migrated into it.

[image of resource graph]

As with all resource graphs, the RDM must be populated with the data necesary to populate data into those nodes whose store data in the businesstable "domains".  Below are images of a set of csv format "authority files" that would necesarily go with this hypothetical resource graph.

[image of auth docs for heritage resource type and name type]

Finally, the .arches file below shows how to structure data for two distinct resources and their attributes:



- use a very simple example of a resource graph.  Graph should contain a mergenode, grouping node, and an E55 entitytype, and a geometry.  Show an example auth doc and .arches file for loading data to the graph.


Exporting Data
==============

