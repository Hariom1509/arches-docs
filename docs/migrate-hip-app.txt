###################
Arches-HIP Workflow
###################

1. Download the prepared v4 HIP package.
----------------------------------------

The package is located here: `github.com/legiongis/arches-v4-hip-pkg <https://github.com/legiongis/arches-v4-hip-pkg>`_.

You can download it from Github, then unzip, rename, and place it in your project, or use this command to clone it locally:

.. code-block:: shell

    git clone https://github.com/legiongis/arches-v4-hip-pkg pkg

The result should be a new package within your project named ``pkg``::

    my_project/
    └─ manage.py
    └─ my_project/
    └─ pkg/

Now go into your project's ``my_project/my_project/settings.py`` file and add this new line somewhere after the ``APP_ROOT`` line::

    PACKAGE_DIR = os.path.join(os.path.dirname(APP_ROOT),'pkg')

.. note:: You can actually name your new package whatever you want, and place it wherever you want, as long as ``PACKAGE_DIR`` holds the path to it. You can even leave out this setting entirely if you pass ``--target path/to/package`` to all of the ``v3`` commands below.

2. Move your v3 data into the package.
--------------------------------------

Move ``v3fullexport.json`` and ``v3fullexport.relations`` from `v3 Preparation Step 1 <export-the-v3-business-data>`_ into ``v3data/business_data``.

Move ``v3reference_data.xml`` from `v3 Preparation Step 2 <export-the-v3-reference-data>`_ into ``v3data/reference_data``.

Your package should now look like this::

    pkg/
      └─ v3data/
          └─ business_data/
              └─ v3fullexport.json
              └─ v3fullexport.relations
          └─ graph_data/
          └─ reference_data/
              └─ v3reference_data.xml
          └─ rm_configs.json

3. Convert your v3 reference data.
----------------------------------

Run:

.. code-block:: shell

    python manage.py v3 convert-v3-skos

New v4 reference data files will be created as shown below.

.. code-block:: shell

    pkg/
      └─ reference_data/
          └─ collections/
              └─ collections.xml
          └─ concepts/
              └─ thesaurus.xml
          └─ v3topconcept_lookup.json # already existed

You can also add the ``-i/--import`` flag to automatically load the reference data into your database.

.. tip::

    At this time you may as well load your package. This will prepare your database with the Resource Models and reference data, and get you ready for the final two steps::
    
        python manage.py packages -o load_package -s "full/path/to/my_project/pkg/"

4. Write the v4 resource JSON.
------------------------------

Now you are ready to convert and import your v3 data::

    python manage.py v3 write-v4-json
    
This command will create new v4 resource JSON files in ``pkg/business_data``, one per Resource Model. You'll be provided with easy copy/paste commands to load the files if you want, or you can add ``-i/--import`` to the command to load the resources directly.

To help you debug any errors you encounter, and generally give you more control over this command, we've provided a number of optional arguments.

-i, --import
        Directly imports the resources after the JSON file is created.
-m, --resource-models
        List the names of resource models to process, by default all are used.
-n, --number
        Limits the number of resources to load.
--exclude
        List of resource ids (uuids) to exclude from the write process.
--verbose
        Enables verbose printing during the process. Not recommended for large operations.

To give an example:

.. code-block:: shell

    python manage.py v3 write-v4-json -m "Activity" -n 100 -i --exclude 08b68d46-c202-458a-bf11-bc7a1dd5b2ef

will write only the first 100 "Activity" resources to v4 JSON (even if there are more Resource Models in your package), excluding a single resource whose id is ``08b68d46-c202-458a-bf11-bc7a1dd5b2ef``, and will then immediately import these resources into your database.

.. tip::

    During this process, it may be useful to use::
    
        python manage.py resources -o remove_resources -y
        
    to erase all existing resources in your database and start from scratch.
    

5. Write the v4 resource relations file.
----------------------------------------

Once you have all of your resources loaded in your database, you can import the resource-to-resource relations from v3. Use::

    python manage.py v3 write-v4-relations
    
to write the file, and add ``-i/--import`` to directly import them. You will likely get errors if you try to import them but have not loaded all of your resources.

6. Load the entire package.
----------------------------------------

Though you may have been loading the individual pieces of the package along the way, the final step should be a full reload of the package. **The following command will erase your whole database and load it with the reference data, Resource Models, and resources you have just created.**

.. code-block:: shell

    python manage.py packages -o load_package -s "/full/path/to/my_project/pkg" --db true