Packages
--------

A package is an external collection of arches data (resource models, business data, concepts, collections) and customization files (widgets, datatypes, functions, system settings) that you can load into an arches project.


Loading a Package
`````````````````

#. To load a package simply run the load_package command:

    .. code-block:: bash

        python manage.py packages -o load_package -s https://github.com/package/archive/branch.zip -db true


    -db    `true` to run setup_py to rebuild your database
    -ow    `overwrite` to overwrite concepts and collections
    -st    `stage` to stage concepts and collections
    -s     a zipfile located on github or locally


Creating a New Package
``````````````````````

If you want to create additional projects with the same data or share your data with others that need to create similar projects, you probably want to create a package.

The `create_package` command will help you get started by generating the folder structure of a new package.

#. To create new package simply run the following command using your project's manage.py file:

    python manage.py packages -o create_package -d /Users/me/path/to/mypackage

#. In your packages directory you will find the following files and directories

    business_data
        resource instance .csv and corresponding .mapping files
    business_data/files
        files to be added to the uploaded files directory
    business_data/relations
        resource relationship files (.relations)
    extensions/function
        each function in this directory should have its own directory with a template (.htm), viewmodel (.js) and module (.py). Each file must share the same base name.
    extensions/datatypes
        each datatype in this directory should have its own directory with a template (.htm), viewmodel (.js) and module (.py). Each file must share the same base name.
    extensions/widgets
        each widget in this directory should have its own folder with a template (.htm), viewmodel (.js) and configuration file (.json). Each file must share the same base name.
    graphs/branches
        arches.json files representing branches
    graphs/resource_models
        arches.json files representing resource models
    map_layers/mapbox_styles/overlays*
        each overlay should have a directory with a mapbox style as exported from mapbox including a `style.json` file, `license.txt` file and an `icons` directory
        ## configuration
    map_layers/mapbox_styles/basemaps*
        each basemap should have a directory with a mapbox style as exported from mapbox including a `style.json` file, `license.txt` file and an `icons` directory
    map_layers/tile_server/overlays*
        each overlay should have a directory with a `.vrt` file and `.xml` to style and configure the layer. Each file must share the same base name.
    map_layers/tile_server/basemaps*
        each overlay should have a directory with a `.vrt` file and `.xml` to style and configure the layer. Each file must share the same base name.
    reference_data/concepts
        SKOS concepts .xml files
    reference_data/collections
        SKOS collection .xml files
    system_settings
        The system settings file for your project.

    \* map layer configuration
        By default mapbox-style layers will be loaded with the name property found in the layer's style.json file. The default name for tile server layers will be the basename of the layer's xml file. For both mapbox-style and tile server layers the default icon-class will be `fa fa-globe`. To customize the name and icon-class, simply add a meta.json file to the layer's directory with the following object:

        .. code-block:: javascript

            {
                "name": "example name",
                "icon": "fa example-class"
            }

#. It is not necessary to populate every directory with data. Only add those files that you would like to share.

    Once you've added the necessary files to your package, simply zip it up the package or push it to a github repository and it's ready to be loaded.
